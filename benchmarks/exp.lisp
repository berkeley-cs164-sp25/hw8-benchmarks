(define (mul a b)
    (if (zero? a)
        0
        (if (zero? b)
            0
            (if (< 0 b)
                (+ (mul a (sub1 b)) a)
                (mul (- 0 a) (- 0 b))
            )
        )
    )
)

(define (exp base power)
    (if (< power 0) 
        0
        (if (zero? power)
            1
            (mul base (exp base (sub1 power)))
        )
    )
)

(print
	(do
		(exp 4 3)
		(exp 1 3)
		(exp 1 -1)
		(exp -2 5)
		(exp 5 5)
		(exp 4 -1)
		(exp 1 3)
		(exp -1 -1)
		(exp 0 1)
		(exp 1 0)
		(exp -1 2)
		(exp -1 3)
		(exp 0 5)
		(exp 5 3)
		(exp 5 -1)
		(exp 3 4)
		(exp 3 2)
		(exp 1 1)
		(exp -2 4)
		(exp -1 4)
		(exp -1 5)
		(exp 5 0)
		(exp 5 4)
		(exp 5 2)
		(exp 3 0)
		(exp 2 1)
		(exp 0 3)
		(exp 1 3)
		(exp 0 5)
		(exp 5 0)
		(exp 4 5)
		(exp 3 5)
		(exp 0 2)
		(exp 1 2)
		(exp -1 2)
		(exp 3 5)
		(exp -1 -1)
		(exp 3 1)
		(exp 0 0)
		(exp -2 4)
		(exp 3 -2)
		(exp -1 1)
		(exp -2 3)
		(exp 1 -1)
		(exp 5 4)
		(exp 1 4)
		(exp -2 2)
		(exp 0 4)
		(exp 0 0)
		(exp 3 -1)
		(exp 1 -2)
		(exp -2 0)
		(exp 2 0)
		(exp 0 -2)
		(exp 2 -2)
		(exp -2 4)
		(exp 3 -2)
		(exp 5 4)
		(exp -2 -1)
		(exp 5 -1)
		(exp 4 3)
		(exp 3 4)
		(exp -2 -1)
		(exp 3 2)
		(exp 1 0)
		(exp -2 5)
		(exp 3 3)
		(exp 4 1)
		(exp 5 2)
		(exp 2 4)
		(exp -2 5)
		(exp 5 2)
		(exp -1 -2)
		(exp 1 -2)
		(exp -1 1)
		(exp 2 2)
		(exp 4 1)
		(exp 3 2)
		(exp 2 3)
		(exp 2 2)
		(exp 1 0)
		(exp 2 2)
		(exp 1 4)
		(exp 0 5)
		(exp 3 4)
		(exp 3 -2)
		(exp -1 1)
		(exp 1 3)
		(exp 3 -2)
		(exp 2 3)
		(exp -2 -1)
		(exp 1 0)
		(exp -2 3)
		(exp 3 3)
		(exp 5 2)
		(exp 3 2)
		(exp -2 -1)
		(exp 0 -1)
		(exp -1 1)
		(exp 4 4)
	)
)